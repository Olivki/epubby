/*
 * Copyright 2019 Oliver Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

@file:JvmName("EpubUtils")

package moe.kanon.epubby

import moe.kanon.epubby.utils.SemVer
import moe.kanon.epubby.utils.compareTo
import moe.kanon.epubby.utils.inside

/**
 * Represents the **major** version formats available for epubs as of creation. (2019-01-23).
 *
 * This enum is used to sort the epub into a certain "version category".
 *
 * This is important to know because there are generally pretty large differences between the formats between
 * major versions, and trying to parse, say, an epub in the v3 format with v2 format rules will end up with
 * a slightly corrupted file.
 *
 * So it's safer to just loudly fail and alert the user that this version is not supported rather than greedily
 * trying to still parse a document that most likely has features this library wasn't built to process.
 *
 * @property [version] The lowest supported version number for this version format.
 *
 * ie. If a book is found to be using `v3.1` of the format, it will be assigned the [EPUB_3][EpubFormat.EPUB_3_0]
 * version, but if it is using `v4.x` it will be assigned the [NOT_SUPPORTED][EpubFormat.NOT_SUPPORTED] version.
 */
enum class EpubFormat(val version: SemVer) {
    /**
     * Represents an unknown epub format version.
     *
     * During the initial deserialization process [Book.version] is set to this value.
     */
    UNKNOWN(SemVer.forIntegers(0, 0, 0)),
    /**
     * Represents the [EPUB 2.x](http://idpf.org/epub/201) format.
     *
     * Any version where `n >= 2 && n < 3` will be sorted into this category.
     *
     * Specifications for EPUB 2.0 format can be found [here](http://www.idpf.org/epub/20/spec/OPS_2.0.1_draft.htm).
     */
    EPUB_2_0(SemVer.forIntegers(2, 0, 0)),
    /**
     * Represents the [EPUB 3.0](http://idpf.org/epub/301) format.
     *
     * Any version where `n >= 3 && n < 3.0.x` will be sorted into this category.
     *
     * Specifications for EPUB 3.0 format can be found [here](http://www.idpf.org/epub/301/spec/epub-publications.html).
     */
    EPUB_3_0(SemVer.forIntegers(3, 0, 0)),
    /**
     * Represents the [EPUB 3.1](http://www.idpf.org/epub/dir/#epub31) format.
     *
     * Any version where `n >= 3.1.x && n < 4` will be sorted into this category.
     *
     * The EPUB 3.1 format is [officially discouraged](http://www.idpf.org/epub/dir/#epub31) from use, and as such the
     * format is explicitly ***not*** supported by epubby, and it should never be used.
     */
    EPUB_3_1(SemVer.forIntegers(3, 1, 0)),
    /**
     * Represents an unsupported EPUB format.
     *
     * This should always be set to the highest **major** version number that's not supported by epubby.
     * Generally this will be an unreleased version of the EPUB format, unless support for this library has been
     * dropped.
     *
     * Currently this is set to react on any `>= v4.x.x` versions.
     */
    NOT_SUPPORTED(SemVer.forIntegers(4, 0, 0));
    
    // we can't implement custom 'compareTo' for 'EpubFormat' because 'compareTo(other: EpubFormat)' is generated by
    // default in java, and it's set to be 'final', so we can't override it.
    
    /**
     * Compares the [version] of `this` format to the specified [semVer].
     */
    operator fun compareTo(semVer: SemVer): Int = version.compareTo(semVer)
    
    /**
     * Returns a [ClosedRange] with the [start][ClosedRange.start] value set to `this` formats [version] and the
     * [end][ClosedRange.endInclusive] value set to the `version` of the specified [other] format.
     *
     * @param [other] the format to create a range to
     */
    operator fun rangeTo(other: EpubFormat): ClosedRange<SemVer> = version..other.version
    
    companion object {
        /**
         * Returns the [EpubFormat] with the closest matching version to the specified [version], or [UNKNOWN] if none
         * is found.
         */
        @JvmStatic
        fun from(version: SemVer): EpubFormat = when {
            version inside EPUB_2_0..EPUB_3_0 -> EPUB_2_0
            version inside EPUB_3_0..EPUB_3_1 -> EPUB_3_0
            version inside EPUB_3_1..NOT_SUPPORTED -> throw UnsupportedOperationException(
                "The use of the epub 3.1.x format is officially discouraged and should never be used."
            )
            version >= NOT_SUPPORTED -> NOT_SUPPORTED
            else -> UNKNOWN
        }
    }
}